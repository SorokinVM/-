Функция ЭлементМожноУдалить(СтруктураПоиска, ПомеченныеОбъекты, ТаблицаСсылок, ПроверенныеСсылки)
	
	// элемент не помечен на удаление - отсутствует в списке помеченных
	Если ПомеченныеОбъекты.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НС = ПроверенныеСсылки.Добавить();
	НС.Ссылка = СтруктураПоиска.Ссылка;
	
	СсылкиНаПомеченныйОбъект = ТаблицаСсылок.НайтиСтроки(СтруктураПоиска);
	
	// исследование ссылок
	ВозможноУдалить = Истина;
	Для каждого СтрокаСсылок из СсылкиНаПомеченныйОбъект Цикл
		
		Если СтрокаСсылок.Ссылка = СтрокаСсылок.Данные Тогда
			ВозможноУдалить = Истина;
			Продолжить;
		КонецЕсли;
			
		ПолноеИмя = СтрокаСсылок.Метаданные.ПолноеИмя();
		Вид = ВРЕГ(Лев(ПолноеИмя, Найти(ПолноеИмя, ".")-1));
	
		// проверка ссылочных данных
		Если Вид = "ДОКУМЕНТ"
			ИЛИ Вид = "СПРАВОЧНИК"
			ИЛИ Вид = "ПЛАНСЧЕТОВ"
			ИЛИ Вид = "ПЛАНВИДОВРАСЧЕТА"
			ИЛИ Вид = "ЗАДАЧА"
			ИЛИ Вид = "БИЗНЕСПРОЦЕСС"
			ИЛИ Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		
			СтруктураПоиска.Ссылка = СтрокаСсылок.Данные;
			
			Если ПроверенныеСсылки.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВозможноУдалить = ЭлементМожноУдалить(СтруктураПоиска, ПомеченныеОбъекты, ТаблицаСсылок, ПроверенныеСсылки);
			
		Иначе
			// ссылку не удаляем, кроме случаев, когда она ведущая в регистре сведений
			ЗначениеВедущегоИзмерения = Ложь;
			
			Если Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
				ИзмеренияРегистраСведений = СтрокаСсылок.Метаданные.Измерения;
				Для Каждого Измерение Из ИзмеренияРегистраСведений Цикл
					Если Измерение.Ведущее Тогда
						Если СтрокаСсылок.Ссылка = СтрокаСсылок.Данные[Измерение.Имя] Тогда
							ЗначениеВедущегоИзмерения = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ВозможноУдалить = ЗначениеВедущегоИзмерения;
				
		КонецЕсли;
		
		// если на ссылку есть неудаляемые элементы, то дальше можно не анализировать
		Если НЕ ВозможноУдалить Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозможноУдалить;
КонецФункции

Процедура нтс_УдалениеПомеченныхОбъектов() Экспорт
	
	// получение данных
	МассивПомеченныеОбъекты = НайтиПомеченныеНаУдаление();
	ТаблицаСсылок = НайтиПоСсылкам(МассивПомеченныеОбъекты);
	ТаблицаСсылок.Индексы.Добавить("Ссылка");
	
	ПомеченныеОбъекты = Новый ТаблицаЗначений;
	ПомеченныеОбъекты.Колонки.Добавить("Ссылка");
	
	Для каждого Эл из МассивПомеченныеОбъекты Цикл
		НС = ПомеченныеОбъекты.Добавить();
		НС.Ссылка = Эл;
	КонецЦикла;
	ПомеченныеОбъекты.Индексы.Добавить("Ссылка");
	
	МассивПомеченныеОбъекты = Неопределено;
	
	СсылкиКУдалению = Новый Массив;
	СтруктураПоиска = Новый Структура("Ссылка");
	
	ПустаяТаблицаПроверенныхСсылок = Новый ТаблицаЗначений;
	ПустаяТаблицаПроверенныхСсылок.Колонки.Добавить("Ссылка");
	ПустаяТаблицаПроверенныхСсылок.Индексы.Добавить("Ссылка");
	
	// анализ и накопление объектов, которые можно удалить
	Для каждого ПомеченныйОбъект из ПомеченныеОбъекты Цикл
		
		// для обработки циклических ссылок
		ПроверенныеСсылки = ПустаяТаблицаПроверенныхСсылок.Скопировать();
		//
		
		СтруктураПоиска.Ссылка = ПомеченныйОбъект.Ссылка;
		
		Если ЭлементМожноУдалить(СтруктураПоиска, ПомеченныеОбъекты, ТаблицаСсылок, ПроверенныеСсылки) Тогда
			СсылкиКУдалению.Добавить(ПомеченныйОбъект.Ссылка);
		КонецЕсли;
		
	КонецЦикла;

	// удаление
	Для каждого УдаляемаяСсылка из СсылкиКУдалению Цикл
		
		ОбъектУдаления = УдаляемаяСсылка.ПолучитьОбъект();
		Если ОбъектУдаления <> Неопределено Тогда
			Если ОбъектУдаления.ПометкаУдаления Тогда
				
				Попытка
            		ОбъектУдаления.Удалить();
				Исключение
					ЗаписьЖурналаРегистрации("Удаление помеченных",
						УровеньЖурналаРегистрации.Предупреждение,
						,
						УдаляемаяСсылка,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
					);
				КонецПопытки;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
